// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speechly/slu/v1/wlu.proto

#include "IncludeBegin.h"

#include "speechly/slu/v1/wlu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fwlu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WLUEntity_speechly_2fslu_2fv1_2fwlu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fwlu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WLUIntent_speechly_2fslu_2fv1_2fwlu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fwlu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WLURequest_speechly_2fslu_2fv1_2fwlu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fwlu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WLUResponse_speechly_2fslu_2fv1_2fwlu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fwlu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WLUSegment_speechly_2fslu_2fv1_2fwlu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_speechly_2fslu_2fv1_2fwlu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WLUToken_speechly_2fslu_2fv1_2fwlu_2eproto;
namespace speechly {
namespace slu {
namespace v1 {
class TextsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextsRequest> _instance;
} _TextsRequest_default_instance_;
class TextsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextsResponse> _instance;
} _TextsResponse_default_instance_;
class WLURequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WLURequest> _instance;
} _WLURequest_default_instance_;
class WLUResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WLUResponse> _instance;
} _WLUResponse_default_instance_;
class WLUSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WLUSegment> _instance;
} _WLUSegment_default_instance_;
class WLUTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WLUToken> _instance;
} _WLUToken_default_instance_;
class WLUEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WLUEntity> _instance;
} _WLUEntity_default_instance_;
class WLUIntentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WLUIntent> _instance;
} _WLUIntent_default_instance_;
}  // namespace v1
}  // namespace slu
}  // namespace speechly
static void InitDefaultsscc_info_TextsRequest_speechly_2fslu_2fv1_2fwlu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_TextsRequest_default_instance_;
    new (ptr) ::speechly::slu::v1::TextsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::TextsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TextsRequest_speechly_2fslu_2fv1_2fwlu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TextsRequest_speechly_2fslu_2fv1_2fwlu_2eproto}, {
      &scc_info_WLURequest_speechly_2fslu_2fv1_2fwlu_2eproto.base,}};

static void InitDefaultsscc_info_TextsResponse_speechly_2fslu_2fv1_2fwlu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_TextsResponse_default_instance_;
    new (ptr) ::speechly::slu::v1::TextsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::TextsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TextsResponse_speechly_2fslu_2fv1_2fwlu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TextsResponse_speechly_2fslu_2fv1_2fwlu_2eproto}, {
      &scc_info_WLUResponse_speechly_2fslu_2fv1_2fwlu_2eproto.base,}};

static void InitDefaultsscc_info_WLUEntity_speechly_2fslu_2fv1_2fwlu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_WLUEntity_default_instance_;
    new (ptr) ::speechly::slu::v1::WLUEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::WLUEntity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WLUEntity_speechly_2fslu_2fv1_2fwlu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WLUEntity_speechly_2fslu_2fv1_2fwlu_2eproto}, {}};

static void InitDefaultsscc_info_WLUIntent_speechly_2fslu_2fv1_2fwlu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_WLUIntent_default_instance_;
    new (ptr) ::speechly::slu::v1::WLUIntent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::WLUIntent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WLUIntent_speechly_2fslu_2fv1_2fwlu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WLUIntent_speechly_2fslu_2fv1_2fwlu_2eproto}, {}};

static void InitDefaultsscc_info_WLURequest_speechly_2fslu_2fv1_2fwlu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_WLURequest_default_instance_;
    new (ptr) ::speechly::slu::v1::WLURequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::WLURequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WLURequest_speechly_2fslu_2fv1_2fwlu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WLURequest_speechly_2fslu_2fv1_2fwlu_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_WLUResponse_speechly_2fslu_2fv1_2fwlu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_WLUResponse_default_instance_;
    new (ptr) ::speechly::slu::v1::WLUResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::WLUResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WLUResponse_speechly_2fslu_2fv1_2fwlu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WLUResponse_speechly_2fslu_2fv1_2fwlu_2eproto}, {
      &scc_info_WLUSegment_speechly_2fslu_2fv1_2fwlu_2eproto.base,}};

static void InitDefaultsscc_info_WLUSegment_speechly_2fslu_2fv1_2fwlu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_WLUSegment_default_instance_;
    new (ptr) ::speechly::slu::v1::WLUSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::WLUSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WLUSegment_speechly_2fslu_2fv1_2fwlu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_WLUSegment_speechly_2fslu_2fv1_2fwlu_2eproto}, {
      &scc_info_WLUToken_speechly_2fslu_2fv1_2fwlu_2eproto.base,
      &scc_info_WLUEntity_speechly_2fslu_2fv1_2fwlu_2eproto.base,
      &scc_info_WLUIntent_speechly_2fslu_2fv1_2fwlu_2eproto.base,}};

static void InitDefaultsscc_info_WLUToken_speechly_2fslu_2fv1_2fwlu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechly::slu::v1::_WLUToken_default_instance_;
    new (ptr) ::speechly::slu::v1::WLUToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechly::slu::v1::WLUToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WLUToken_speechly_2fslu_2fv1_2fwlu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WLUToken_speechly_2fslu_2fv1_2fwlu_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_speechly_2fslu_2fv1_2fwlu_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_speechly_2fslu_2fv1_2fwlu_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_speechly_2fslu_2fv1_2fwlu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::TextsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::TextsRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::TextsRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::TextsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::TextsResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLURequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLURequest, language_code_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLURequest, text_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLURequest, reference_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUResponse, segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUSegment, text_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUSegment, tokens_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUSegment, entities_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUSegment, intent_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUSegment, annotated_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUToken, word_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUToken, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUEntity, entity_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUEntity, value_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUEntity, start_position_),
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUEntity, end_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speechly::slu::v1::WLUIntent, intent_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechly::slu::v1::TextsRequest)},
  { 7, -1, sizeof(::speechly::slu::v1::TextsResponse)},
  { 13, -1, sizeof(::speechly::slu::v1::WLURequest)},
  { 21, -1, sizeof(::speechly::slu::v1::WLUResponse)},
  { 27, -1, sizeof(::speechly::slu::v1::WLUSegment)},
  { 37, -1, sizeof(::speechly::slu::v1::WLUToken)},
  { 44, -1, sizeof(::speechly::slu::v1::WLUEntity)},
  { 53, -1, sizeof(::speechly::slu::v1::WLUIntent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_TextsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_TextsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_WLURequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_WLUResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_WLUSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_WLUToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_WLUEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speechly::slu::v1::_WLUIntent_default_instance_),
};

const char descriptor_table_protodef_speechly_2fslu_2fv1_2fwlu_2eproto[] =
  "\n\031speechly/slu/v1/wlu.proto\022\017speechly.sl"
  "u.v1\032\037google/protobuf/timestamp.proto\"M\n"
  "\014TextsRequest\022\016\n\006app_id\030\001 \001(\t\022-\n\010request"
  "s\030\002 \003(\0132\033.speechly.slu.v1.WLURequest\"@\n\r"
  "TextsResponse\022/\n\tresponses\030\001 \003(\0132\034.speec"
  "hly.slu.v1.WLUResponse\"e\n\nWLURequest\022\025\n\r"
  "language_code\030\001 \001(\t\022\014\n\004text\030\002 \001(\t\0222\n\016ref"
  "erence_time\030\003 \001(\0132\032.google.protobuf.Time"
  "stamp\"<\n\013WLUResponse\022-\n\010segments\030\001 \003(\0132\033"
  ".speechly.slu.v1.WLUSegment\"\267\001\n\nWLUSegme"
  "nt\022\014\n\004text\030\001 \001(\t\022)\n\006tokens\030\002 \003(\0132\031.speec"
  "hly.slu.v1.WLUToken\022,\n\010entities\030\003 \003(\0132\032."
  "speechly.slu.v1.WLUEntity\022*\n\006intent\030\004 \001("
  "\0132\032.speechly.slu.v1.WLUIntent\022\026\n\016annotat"
  "ed_text\030\005 \001(\t\"\'\n\010WLUToken\022\014\n\004word\030\001 \001(\t\022"
  "\r\n\005index\030\002 \001(\005\"X\n\tWLUEntity\022\016\n\006entity\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t\022\026\n\016start_position\030\003 \001"
  "(\005\022\024\n\014end_position\030\004 \001(\005\"\033\n\tWLUIntent\022\016\n"
  "\006intent\030\001 \001(\t2\220\001\n\003WLU\022A\n\004Text\022\033.speechly"
  ".slu.v1.WLURequest\032\034.speechly.slu.v1.WLU"
  "Response\022F\n\005Texts\022\035.speechly.slu.v1.Text"
  "sRequest\032\036.speechly.slu.v1.TextsResponse"
  "Bb\n\023com.speechly.slu.v1B\010WluProtoP\001Z\025spe"
  "echly/slu/v1;sluv1\242\002\003SSX\252\002\017Speechly.Slu."
  "V1\312\002\017Speechly\\Slu\\V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_sccs[8] = {
  &scc_info_TextsRequest_speechly_2fslu_2fv1_2fwlu_2eproto.base,
  &scc_info_TextsResponse_speechly_2fslu_2fv1_2fwlu_2eproto.base,
  &scc_info_WLUEntity_speechly_2fslu_2fv1_2fwlu_2eproto.base,
  &scc_info_WLUIntent_speechly_2fslu_2fv1_2fwlu_2eproto.base,
  &scc_info_WLURequest_speechly_2fslu_2fv1_2fwlu_2eproto.base,
  &scc_info_WLUResponse_speechly_2fslu_2fv1_2fwlu_2eproto.base,
  &scc_info_WLUSegment_speechly_2fslu_2fv1_2fwlu_2eproto.base,
  &scc_info_WLUToken_speechly_2fslu_2fv1_2fwlu_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_once;
static bool descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto = {
  &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_initialized, descriptor_table_protodef_speechly_2fslu_2fv1_2fwlu_2eproto, "speechly/slu/v1/wlu.proto", 988,
  &descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_once, descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_sccs, descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_speechly_2fslu_2fv1_2fwlu_2eproto::offsets,
  file_level_metadata_speechly_2fslu_2fv1_2fwlu_2eproto, 8, file_level_enum_descriptors_speechly_2fslu_2fv1_2fwlu_2eproto, file_level_service_descriptors_speechly_2fslu_2fv1_2fwlu_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_speechly_2fslu_2fv1_2fwlu_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_speechly_2fslu_2fv1_2fwlu_2eproto), true);
namespace speechly {
namespace slu {
namespace v1 {

// ===================================================================

void TextsRequest::InitAsDefaultInstance() {
}
class TextsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextsRequest::kAppIdFieldNumber;
const int TextsRequest::kRequestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextsRequest::TextsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.TextsRequest)
}
TextsRequest::TextsRequest(const TextsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.TextsRequest)
}

void TextsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextsRequest_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TextsRequest::~TextsRequest() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.TextsRequest)
  SharedDtor();
}

void TextsRequest::SharedDtor() {
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextsRequest& TextsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextsRequest_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  return *internal_default_instance();
}


void TextsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.TextsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TextsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_app_id(), ptr, ctx, "speechly.slu.v1.TextsRequest.app_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .speechly.slu.v1.WLURequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TextsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechly.slu.v1.TextsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string app_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), static_cast<int>(this->app_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "speechly.slu.v1.TextsRequest.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .speechly.slu.v1.WLURequest requests = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechly.slu.v1.TextsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechly.slu.v1.TextsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TextsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechly.slu.v1.TextsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), static_cast<int>(this->app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.TextsRequest.app_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // repeated .speechly.slu.v1.WLURequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->requests(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechly.slu.v1.TextsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* TextsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.TextsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), static_cast<int>(this->app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.TextsRequest.app_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->app_id(), target);
  }

  // repeated .speechly.slu.v1.WLURequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->requests(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.TextsRequest)
  return target;
}

size_t TextsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.TextsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLURequest requests = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->requests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->requests(static_cast<int>(i)));
    }
  }

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.TextsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TextsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.TextsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.TextsRequest)
    MergeFrom(*source);
  }
}

void TextsRequest::MergeFrom(const TextsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.TextsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
}

void TextsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.TextsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextsRequest::CopyFrom(const TextsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.TextsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextsRequest::IsInitialized() const {
  return true;
}

void TextsRequest::Swap(TextsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextsRequest::InternalSwap(TextsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&requests_)->InternalSwap(CastToBase(&other->requests_));
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TextsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextsResponse::InitAsDefaultInstance() {
}
class TextsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextsResponse::kResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextsResponse::TextsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.TextsResponse)
}
TextsResponse::TextsResponse(const TextsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.TextsResponse)
}

void TextsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextsResponse_speechly_2fslu_2fv1_2fwlu_2eproto.base);
}

TextsResponse::~TextsResponse() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.TextsResponse)
  SharedDtor();
}

void TextsResponse::SharedDtor() {
}

void TextsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextsResponse& TextsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextsResponse_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  return *internal_default_instance();
}


void TextsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.TextsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TextsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .speechly.slu.v1.WLUResponse responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TextsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechly.slu.v1.TextsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .speechly.slu.v1.WLUResponse responses = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechly.slu.v1.TextsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechly.slu.v1.TextsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TextsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechly.slu.v1.TextsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLUResponse responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->responses(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechly.slu.v1.TextsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* TextsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.TextsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLUResponse responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->responses(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.TextsResponse)
  return target;
}

size_t TextsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.TextsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLUResponse responses = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->responses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->responses(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.TextsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TextsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.TextsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.TextsResponse)
    MergeFrom(*source);
  }
}

void TextsResponse::MergeFrom(const TextsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.TextsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
}

void TextsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.TextsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextsResponse::CopyFrom(const TextsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.TextsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextsResponse::IsInitialized() const {
  return true;
}

void TextsResponse::Swap(TextsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextsResponse::InternalSwap(TextsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&responses_)->InternalSwap(CastToBase(&other->responses_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WLURequest::InitAsDefaultInstance() {
  ::speechly::slu::v1::_WLURequest_default_instance_._instance.get_mutable()->reference_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class WLURequest::HasBitSetters {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& reference_time(const WLURequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
WLURequest::HasBitSetters::reference_time(const WLURequest* msg) {
  return *msg->reference_time_;
}
void WLURequest::clear_reference_time() {
  if (GetArenaNoVirtual() == nullptr && reference_time_ != nullptr) {
    delete reference_time_;
  }
  reference_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WLURequest::kLanguageCodeFieldNumber;
const int WLURequest::kTextFieldNumber;
const int WLURequest::kReferenceTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WLURequest::WLURequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.WLURequest)
}
WLURequest::WLURequest(const WLURequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_reference_time()) {
    reference_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.reference_time_);
  } else {
    reference_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.WLURequest)
}

void WLURequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WLURequest_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_time_ = nullptr;
}

WLURequest::~WLURequest() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.WLURequest)
  SharedDtor();
}

void WLURequest::SharedDtor() {
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reference_time_;
}

void WLURequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WLURequest& WLURequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WLURequest_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  return *internal_default_instance();
}


void WLURequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.WLURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && reference_time_ != nullptr) {
    delete reference_time_;
  }
  reference_time_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WLURequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string language_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_language_code(), ptr, ctx, "speechly.slu.v1.WLURequest.language_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "speechly.slu.v1.WLURequest.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp reference_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_reference_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WLURequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechly.slu.v1.WLURequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string language_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "speechly.slu.v1.WLURequest.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "speechly.slu.v1.WLURequest.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp reference_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechly.slu.v1.WLURequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechly.slu.v1.WLURequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WLURequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechly.slu.v1.WLURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLURequest.language_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language_code(), output);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLURequest.text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // .google.protobuf.Timestamp reference_time = 3;
  if (this->has_reference_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::reference_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechly.slu.v1.WLURequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* WLURequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.WLURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLURequest.language_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->language_code(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLURequest.text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // .google.protobuf.Timestamp reference_time = 3;
  if (this->has_reference_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::reference_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.WLURequest)
  return target;
}

size_t WLURequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.WLURequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->text());
  }

  // .google.protobuf.Timestamp reference_time = 3;
  if (this->has_reference_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_time_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WLURequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.WLURequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WLURequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WLURequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.WLURequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.WLURequest)
    MergeFrom(*source);
  }
}

void WLURequest::MergeFrom(const WLURequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.WLURequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_reference_time()) {
    mutable_reference_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.reference_time());
  }
}

void WLURequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.WLURequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WLURequest::CopyFrom(const WLURequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.WLURequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLURequest::IsInitialized() const {
  return true;
}

void WLURequest::Swap(WLURequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WLURequest::InternalSwap(WLURequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reference_time_, other->reference_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WLURequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WLUResponse::InitAsDefaultInstance() {
}
class WLUResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WLUResponse::kSegmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WLUResponse::WLUResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.WLUResponse)
}
WLUResponse::WLUResponse(const WLUResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.WLUResponse)
}

void WLUResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WLUResponse_speechly_2fslu_2fv1_2fwlu_2eproto.base);
}

WLUResponse::~WLUResponse() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.WLUResponse)
  SharedDtor();
}

void WLUResponse::SharedDtor() {
}

void WLUResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WLUResponse& WLUResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WLUResponse_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  return *internal_default_instance();
}


void WLUResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.WLUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WLUResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .speechly.slu.v1.WLUSegment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WLUResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechly.slu.v1.WLUResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .speechly.slu.v1.WLUSegment segments = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechly.slu.v1.WLUResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechly.slu.v1.WLUResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WLUResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechly.slu.v1.WLUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLUSegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->segments(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechly.slu.v1.WLUResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* WLUResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.WLUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLUSegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->segments(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.WLUResponse)
  return target;
}

size_t WLUResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.WLUResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLUSegment segments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->segments(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WLUResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.WLUResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WLUResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WLUResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.WLUResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.WLUResponse)
    MergeFrom(*source);
  }
}

void WLUResponse::MergeFrom(const WLUResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.WLUResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
}

void WLUResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.WLUResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WLUResponse::CopyFrom(const WLUResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.WLUResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLUResponse::IsInitialized() const {
  return true;
}

void WLUResponse::Swap(WLUResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WLUResponse::InternalSwap(WLUResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&segments_)->InternalSwap(CastToBase(&other->segments_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WLUResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WLUSegment::InitAsDefaultInstance() {
  ::speechly::slu::v1::_WLUSegment_default_instance_._instance.get_mutable()->intent_ = const_cast< ::speechly::slu::v1::WLUIntent*>(
      ::speechly::slu::v1::WLUIntent::internal_default_instance());
}
class WLUSegment::HasBitSetters {
 public:
  static const ::speechly::slu::v1::WLUIntent& intent(const WLUSegment* msg);
};

const ::speechly::slu::v1::WLUIntent&
WLUSegment::HasBitSetters::intent(const WLUSegment* msg) {
  return *msg->intent_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WLUSegment::kTextFieldNumber;
const int WLUSegment::kTokensFieldNumber;
const int WLUSegment::kEntitiesFieldNumber;
const int WLUSegment::kIntentFieldNumber;
const int WLUSegment::kAnnotatedTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WLUSegment::WLUSegment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.WLUSegment)
}
WLUSegment::WLUSegment(const WLUSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tokens_(from.tokens_),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  annotated_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.annotated_text().size() > 0) {
    annotated_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotated_text_);
  }
  if (from.has_intent()) {
    intent_ = new ::speechly::slu::v1::WLUIntent(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.WLUSegment)
}

void WLUSegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WLUSegment_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotated_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_ = nullptr;
}

WLUSegment::~WLUSegment() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.WLUSegment)
  SharedDtor();
}

void WLUSegment::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotated_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete intent_;
}

void WLUSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WLUSegment& WLUSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WLUSegment_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  return *internal_default_instance();
}


void WLUSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.WLUSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  entities_.Clear();
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotated_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && intent_ != nullptr) {
    delete intent_;
  }
  intent_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WLUSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "speechly.slu.v1.WLUSegment.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .speechly.slu.v1.WLUToken tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .speechly.slu.v1.WLUEntity entities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // .speechly.slu.v1.WLUIntent intent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string annotated_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_annotated_text(), ptr, ctx, "speechly.slu.v1.WLUSegment.annotated_text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WLUSegment::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechly.slu.v1.WLUSegment)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "speechly.slu.v1.WLUSegment.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .speechly.slu.v1.WLUToken tokens = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .speechly.slu.v1.WLUEntity entities = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speechly.slu.v1.WLUIntent intent = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string annotated_text = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_annotated_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->annotated_text().data(), static_cast<int>(this->annotated_text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "speechly.slu.v1.WLUSegment.annotated_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechly.slu.v1.WLUSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechly.slu.v1.WLUSegment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WLUSegment::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechly.slu.v1.WLUSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUSegment.text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // repeated .speechly.slu.v1.WLUToken tokens = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tokens(static_cast<int>(i)),
      output);
  }

  // repeated .speechly.slu.v1.WLUEntity entities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->entities(static_cast<int>(i)),
      output);
  }

  // .speechly.slu.v1.WLUIntent intent = 4;
  if (this->has_intent()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::intent(this), output);
  }

  // string annotated_text = 5;
  if (this->annotated_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->annotated_text().data(), static_cast<int>(this->annotated_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUSegment.annotated_text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->annotated_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechly.slu.v1.WLUSegment)
}

::PROTOBUF_NAMESPACE_ID::uint8* WLUSegment::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.WLUSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUSegment.text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // repeated .speechly.slu.v1.WLUToken tokens = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tokens(static_cast<int>(i)), target);
  }

  // repeated .speechly.slu.v1.WLUEntity entities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entities_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->entities(static_cast<int>(i)), target);
  }

  // .speechly.slu.v1.WLUIntent intent = 4;
  if (this->has_intent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::intent(this), target);
  }

  // string annotated_text = 5;
  if (this->annotated_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->annotated_text().data(), static_cast<int>(this->annotated_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUSegment.annotated_text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->annotated_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.WLUSegment)
  return target;
}

size_t WLUSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.WLUSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speechly.slu.v1.WLUToken tokens = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tokens_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tokens(static_cast<int>(i)));
    }
  }

  // repeated .speechly.slu.v1.WLUEntity entities = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->entities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entities(static_cast<int>(i)));
    }
  }

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->text());
  }

  // string annotated_text = 5;
  if (this->annotated_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->annotated_text());
  }

  // .speechly.slu.v1.WLUIntent intent = 4;
  if (this->has_intent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intent_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WLUSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.WLUSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const WLUSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WLUSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.WLUSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.WLUSegment)
    MergeFrom(*source);
  }
}

void WLUSegment::MergeFrom(const WLUSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.WLUSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  entities_.MergeFrom(from.entities_);
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.annotated_text().size() > 0) {

    annotated_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotated_text_);
  }
  if (from.has_intent()) {
    mutable_intent()->::speechly::slu::v1::WLUIntent::MergeFrom(from.intent());
  }
}

void WLUSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.WLUSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WLUSegment::CopyFrom(const WLUSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.WLUSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLUSegment::IsInitialized() const {
  return true;
}

void WLUSegment::Swap(WLUSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WLUSegment::InternalSwap(WLUSegment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tokens_)->InternalSwap(CastToBase(&other->tokens_));
  CastToBase(&entities_)->InternalSwap(CastToBase(&other->entities_));
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  annotated_text_.Swap(&other->annotated_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(intent_, other->intent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WLUSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WLUToken::InitAsDefaultInstance() {
}
class WLUToken::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WLUToken::kWordFieldNumber;
const int WLUToken::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WLUToken::WLUToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.WLUToken)
}
WLUToken::WLUToken(const WLUToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.word().size() > 0) {
    word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.WLUToken)
}

void WLUToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WLUToken_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
}

WLUToken::~WLUToken() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.WLUToken)
  SharedDtor();
}

void WLUToken::SharedDtor() {
  word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WLUToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WLUToken& WLUToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WLUToken_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  return *internal_default_instance();
}


void WLUToken::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.WLUToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WLUToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string word = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_word(), ptr, ctx, "speechly.slu.v1.WLUToken.word");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WLUToken::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechly.slu.v1.WLUToken)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string word = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->word().data(), static_cast<int>(this->word().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "speechly.slu.v1.WLUToken.word"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechly.slu.v1.WLUToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechly.slu.v1.WLUToken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WLUToken::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechly.slu.v1.WLUToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string word = 1;
  if (this->word().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), static_cast<int>(this->word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUToken.word");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->word(), output);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechly.slu.v1.WLUToken)
}

::PROTOBUF_NAMESPACE_ID::uint8* WLUToken::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.WLUToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string word = 1;
  if (this->word().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), static_cast<int>(this->word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUToken.word");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->word(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.WLUToken)
  return target;
}

size_t WLUToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.WLUToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string word = 1;
  if (this->word().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->word());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WLUToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.WLUToken)
  GOOGLE_DCHECK_NE(&from, this);
  const WLUToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WLUToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.WLUToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.WLUToken)
    MergeFrom(*source);
  }
}

void WLUToken::MergeFrom(const WLUToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.WLUToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.word().size() > 0) {

    word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void WLUToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.WLUToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WLUToken::CopyFrom(const WLUToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.WLUToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLUToken::IsInitialized() const {
  return true;
}

void WLUToken::Swap(WLUToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WLUToken::InternalSwap(WLUToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  word_.Swap(&other->word_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WLUToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WLUEntity::InitAsDefaultInstance() {
}
class WLUEntity::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WLUEntity::kEntityFieldNumber;
const int WLUEntity::kValueFieldNumber;
const int WLUEntity::kStartPositionFieldNumber;
const int WLUEntity::kEndPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WLUEntity::WLUEntity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.WLUEntity)
}
WLUEntity::WLUEntity(const WLUEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.entity().size() > 0) {
    entity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&start_position_, &from.start_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_position_) -
    reinterpret_cast<char*>(&start_position_)) + sizeof(end_position_));
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.WLUEntity)
}

void WLUEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WLUEntity_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_position_) -
      reinterpret_cast<char*>(&start_position_)) + sizeof(end_position_));
}

WLUEntity::~WLUEntity() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.WLUEntity)
  SharedDtor();
}

void WLUEntity::SharedDtor() {
  entity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WLUEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WLUEntity& WLUEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WLUEntity_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  return *internal_default_instance();
}


void WLUEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.WLUEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_position_) -
      reinterpret_cast<char*>(&start_position_)) + sizeof(end_position_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WLUEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entity(), ptr, ctx, "speechly.slu.v1.WLUEntity.entity");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "speechly.slu.v1.WLUEntity.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WLUEntity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechly.slu.v1.WLUEntity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entity()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entity().data(), static_cast<int>(this->entity().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "speechly.slu.v1.WLUEntity.entity"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "speechly.slu.v1.WLUEntity.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start_position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end_position = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechly.slu.v1.WLUEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechly.slu.v1.WLUEntity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WLUEntity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechly.slu.v1.WLUEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity = 1;
  if (this->entity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity().data(), static_cast<int>(this->entity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUEntity.entity");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUEntity.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // int32 start_position = 3;
  if (this->start_position() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->start_position(), output);
  }

  // int32 end_position = 4;
  if (this->end_position() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->end_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechly.slu.v1.WLUEntity)
}

::PROTOBUF_NAMESPACE_ID::uint8* WLUEntity::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.WLUEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity = 1;
  if (this->entity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity().data(), static_cast<int>(this->entity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUEntity.entity");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->entity(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUEntity.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // int32 start_position = 3;
  if (this->start_position() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->start_position(), target);
  }

  // int32 end_position = 4;
  if (this->end_position() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->end_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.WLUEntity)
  return target;
}

size_t WLUEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.WLUEntity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity = 1;
  if (this->entity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entity());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  // int32 start_position = 3;
  if (this->start_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->start_position());
  }

  // int32 end_position = 4;
  if (this->end_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->end_position());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WLUEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.WLUEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const WLUEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WLUEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.WLUEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.WLUEntity)
    MergeFrom(*source);
  }
}

void WLUEntity::MergeFrom(const WLUEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.WLUEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity().size() > 0) {

    entity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.start_position() != 0) {
    set_start_position(from.start_position());
  }
  if (from.end_position() != 0) {
    set_end_position(from.end_position());
  }
}

void WLUEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.WLUEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WLUEntity::CopyFrom(const WLUEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.WLUEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLUEntity::IsInitialized() const {
  return true;
}

void WLUEntity::Swap(WLUEntity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WLUEntity::InternalSwap(WLUEntity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_.Swap(&other->entity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_position_, other->start_position_);
  swap(end_position_, other->end_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WLUEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WLUIntent::InitAsDefaultInstance() {
}
class WLUIntent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WLUIntent::kIntentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WLUIntent::WLUIntent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechly.slu.v1.WLUIntent)
}
WLUIntent::WLUIntent(const WLUIntent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.intent().size() > 0) {
    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  // @@protoc_insertion_point(copy_constructor:speechly.slu.v1.WLUIntent)
}

void WLUIntent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WLUIntent_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WLUIntent::~WLUIntent() {
  // @@protoc_insertion_point(destructor:speechly.slu.v1.WLUIntent)
  SharedDtor();
}

void WLUIntent::SharedDtor() {
  intent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WLUIntent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WLUIntent& WLUIntent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WLUIntent_speechly_2fslu_2fv1_2fwlu_2eproto.base);
  return *internal_default_instance();
}


void WLUIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:speechly.slu.v1.WLUIntent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WLUIntent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string intent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_intent(), ptr, ctx, "speechly.slu.v1.WLUIntent.intent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WLUIntent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechly.slu.v1.WLUIntent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string intent = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_intent()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->intent().data(), static_cast<int>(this->intent().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "speechly.slu.v1.WLUIntent.intent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechly.slu.v1.WLUIntent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechly.slu.v1.WLUIntent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WLUIntent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechly.slu.v1.WLUIntent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string intent = 1;
  if (this->intent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->intent().data(), static_cast<int>(this->intent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUIntent.intent");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->intent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speechly.slu.v1.WLUIntent)
}

::PROTOBUF_NAMESPACE_ID::uint8* WLUIntent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:speechly.slu.v1.WLUIntent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string intent = 1;
  if (this->intent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->intent().data(), static_cast<int>(this->intent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "speechly.slu.v1.WLUIntent.intent");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->intent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechly.slu.v1.WLUIntent)
  return target;
}

size_t WLUIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechly.slu.v1.WLUIntent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string intent = 1;
  if (this->intent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->intent());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WLUIntent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechly.slu.v1.WLUIntent)
  GOOGLE_DCHECK_NE(&from, this);
  const WLUIntent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WLUIntent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechly.slu.v1.WLUIntent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechly.slu.v1.WLUIntent)
    MergeFrom(*source);
  }
}

void WLUIntent::MergeFrom(const WLUIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechly.slu.v1.WLUIntent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.intent().size() > 0) {

    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
}

void WLUIntent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechly.slu.v1.WLUIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WLUIntent::CopyFrom(const WLUIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechly.slu.v1.WLUIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WLUIntent::IsInitialized() const {
  return true;
}

void WLUIntent::Swap(WLUIntent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WLUIntent::InternalSwap(WLUIntent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  intent_.Swap(&other->intent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata WLUIntent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace slu
}  // namespace speechly
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::TextsRequest* Arena::CreateMaybeMessage< ::speechly::slu::v1::TextsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::TextsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::TextsResponse* Arena::CreateMaybeMessage< ::speechly::slu::v1::TextsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::TextsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::WLURequest* Arena::CreateMaybeMessage< ::speechly::slu::v1::WLURequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::WLURequest >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::WLUResponse* Arena::CreateMaybeMessage< ::speechly::slu::v1::WLUResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::WLUResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::WLUSegment* Arena::CreateMaybeMessage< ::speechly::slu::v1::WLUSegment >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::WLUSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::WLUToken* Arena::CreateMaybeMessage< ::speechly::slu::v1::WLUToken >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::WLUToken >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::WLUEntity* Arena::CreateMaybeMessage< ::speechly::slu::v1::WLUEntity >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::WLUEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::speechly::slu::v1::WLUIntent* Arena::CreateMaybeMessage< ::speechly::slu::v1::WLUIntent >(Arena* arena) {
  return Arena::CreateInternal< ::speechly::slu::v1::WLUIntent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

#include "IncludeEnd.h"
