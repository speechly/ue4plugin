// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sg.proto

#include "IncludeBegin.h"

#include "sg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_sg_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SluConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SluError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SluEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SluStarted;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Token;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Alternative;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SluFinished;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Utterance;
}  // namespace protobuf_sg_2eproto
namespace speechgrinder {
namespace sgapi {
namespace v1 {
class SluRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SluRequest>
      _instance;
  const ::speechgrinder::sgapi::v1::SluConfig* config_;
  const ::speechgrinder::sgapi::v1::SluEvent* event_;
  ::google::protobuf::internal::ArenaStringPtr audio_;
} _SluRequest_default_instance_;
class SluConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SluConfig>
      _instance;
} _SluConfig_default_instance_;
class SluEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SluEvent>
      _instance;
} _SluEvent_default_instance_;
class SluResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SluResponse>
      _instance;
  const ::speechgrinder::sgapi::v1::SluStarted* started_;
  const ::speechgrinder::sgapi::v1::Utterance* utterance_;
  const ::speechgrinder::sgapi::v1::SluFinished* finished_;
} _SluResponse_default_instance_;
class SluStartedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SluStarted>
      _instance;
} _SluStarted_default_instance_;
class SluFinishedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SluFinished>
      _instance;
} _SluFinished_default_instance_;
class SluErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SluError>
      _instance;
} _SluError_default_instance_;
class UtteranceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Utterance>
      _instance;
} _Utterance_default_instance_;
class AlternativeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Alternative>
      _instance;
} _Alternative_default_instance_;
class TokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Token>
      _instance;
} _Token_default_instance_;
class LoginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest>
      _instance;
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginResponse>
      _instance;
} _LoginResponse_default_instance_;
}  // namespace v1
}  // namespace sgapi
}  // namespace speechgrinder
namespace protobuf_sg_2eproto {
static void InitDefaultsSluRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechgrinder::sgapi::v1::_SluRequest_default_instance_;
    new (ptr) ::speechgrinder::sgapi::v1::SluRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechgrinder::sgapi::v1::SluRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SluRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSluRequest}, {
      &protobuf_sg_2eproto::scc_info_SluConfig.base,
      &protobuf_sg_2eproto::scc_info_SluEvent.base,}};

static void InitDefaultsSluConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechgrinder::sgapi::v1::_SluConfig_default_instance_;
    new (ptr) ::speechgrinder::sgapi::v1::SluConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechgrinder::sgapi::v1::SluConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SluConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSluConfig}, {}};

static void InitDefaultsSluEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechgrinder::sgapi::v1::_SluEvent_default_instance_;
    new (ptr) ::speechgrinder::sgapi::v1::SluEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechgrinder::sgapi::v1::SluEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SluEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSluEvent}, {}};

static void InitDefaultsSluResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechgrinder::sgapi::v1::_SluResponse_default_instance_;
    new (ptr) ::speechgrinder::sgapi::v1::SluResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechgrinder::sgapi::v1::SluResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SluResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSluResponse}, {
      &protobuf_sg_2eproto::scc_info_SluStarted.base,
      &protobuf_sg_2eproto::scc_info_Utterance.base,
      &protobuf_sg_2eproto::scc_info_SluFinished.base,}};

static void InitDefaultsSluStarted() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechgrinder::sgapi::v1::_SluStarted_default_instance_;
    new (ptr) ::speechgrinder::sgapi::v1::SluStarted();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechgrinder::sgapi::v1::SluStarted::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SluStarted =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSluStarted}, {}};

static void InitDefaultsSluFinished() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechgrinder::sgapi::v1::_SluFinished_default_instance_;
    new (ptr) ::speechgrinder::sgapi::v1::SluFinished();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechgrinder::sgapi::v1::SluFinished::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SluFinished =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSluFinished}, {
      &protobuf_sg_2eproto::scc_info_SluError.base,}};

static void InitDefaultsSluError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechgrinder::sgapi::v1::_SluError_default_instance_;
    new (ptr) ::speechgrinder::sgapi::v1::SluError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechgrinder::sgapi::v1::SluError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SluError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSluError}, {}};

static void InitDefaultsUtterance() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechgrinder::sgapi::v1::_Utterance_default_instance_;
    new (ptr) ::speechgrinder::sgapi::v1::Utterance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechgrinder::sgapi::v1::Utterance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Utterance =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUtterance}, {
      &protobuf_sg_2eproto::scc_info_Alternative.base,}};

static void InitDefaultsAlternative() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechgrinder::sgapi::v1::_Alternative_default_instance_;
    new (ptr) ::speechgrinder::sgapi::v1::Alternative();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechgrinder::sgapi::v1::Alternative::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Alternative =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAlternative}, {
      &protobuf_sg_2eproto::scc_info_Token.base,}};

static void InitDefaultsToken() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechgrinder::sgapi::v1::_Token_default_instance_;
    new (ptr) ::speechgrinder::sgapi::v1::Token();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechgrinder::sgapi::v1::Token::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Token =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsToken}, {}};

static void InitDefaultsLoginRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechgrinder::sgapi::v1::_LoginRequest_default_instance_;
    new (ptr) ::speechgrinder::sgapi::v1::LoginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechgrinder::sgapi::v1::LoginRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginRequest}, {}};

static void InitDefaultsLoginResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speechgrinder::sgapi::v1::_LoginResponse_default_instance_;
    new (ptr) ::speechgrinder::sgapi::v1::LoginResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speechgrinder::sgapi::v1::LoginResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SluRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SluConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SluEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SluResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SluStarted.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SluFinished.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SluError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Utterance.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Alternative.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Token.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginResponse.base);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::speechgrinder::sgapi::v1::SluRequestDefaultTypeInternal, config_),
  offsetof(::speechgrinder::sgapi::v1::SluRequestDefaultTypeInternal, event_),
  offsetof(::speechgrinder::sgapi::v1::SluRequestDefaultTypeInternal, audio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluRequest, streaming_request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluConfig, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluConfig, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluConfig, sample_rate_hertz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluConfig, language_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluEvent, event_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::speechgrinder::sgapi::v1::SluResponseDefaultTypeInternal, started_),
  offsetof(::speechgrinder::sgapi::v1::SluResponseDefaultTypeInternal, utterance_),
  offsetof(::speechgrinder::sgapi::v1::SluResponseDefaultTypeInternal, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluResponse, streaming_response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluStarted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluStarted, utterance_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluFinished, utterance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluFinished, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluError, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::SluError, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Utterance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Utterance, utterance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Utterance, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Utterance, language_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Utterance, alternatives_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Alternative, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Alternative, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Alternative, tokens_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Token, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Token, text_with_trailing_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Token, lemma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Token, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Token, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Token, case__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Token, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Token, entity_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Token, position_in_entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Token, is_segment_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::Token, trailing_silence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::LoginRequest, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::LoginRequest, app_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speechgrinder::sgapi::v1::LoginResponse, token_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speechgrinder::sgapi::v1::SluRequest)},
  { 9, -1, sizeof(::speechgrinder::sgapi::v1::SluConfig)},
  { 18, -1, sizeof(::speechgrinder::sgapi::v1::SluEvent)},
  { 24, -1, sizeof(::speechgrinder::sgapi::v1::SluResponse)},
  { 33, -1, sizeof(::speechgrinder::sgapi::v1::SluStarted)},
  { 39, -1, sizeof(::speechgrinder::sgapi::v1::SluFinished)},
  { 46, -1, sizeof(::speechgrinder::sgapi::v1::SluError)},
  { 53, -1, sizeof(::speechgrinder::sgapi::v1::Utterance)},
  { 62, -1, sizeof(::speechgrinder::sgapi::v1::Alternative)},
  { 69, -1, sizeof(::speechgrinder::sgapi::v1::Token)},
  { 85, -1, sizeof(::speechgrinder::sgapi::v1::LoginRequest)},
  { 92, -1, sizeof(::speechgrinder::sgapi::v1::LoginResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechgrinder::sgapi::v1::_SluRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechgrinder::sgapi::v1::_SluConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechgrinder::sgapi::v1::_SluEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechgrinder::sgapi::v1::_SluResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechgrinder::sgapi::v1::_SluStarted_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechgrinder::sgapi::v1::_SluFinished_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechgrinder::sgapi::v1::_SluError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechgrinder::sgapi::v1::_Utterance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechgrinder::sgapi::v1::_Alternative_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechgrinder::sgapi::v1::_Token_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechgrinder::sgapi::v1::_LoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speechgrinder::sgapi::v1::_LoginResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sg.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\010sg.proto\022\026speechgrinder.sgapi.v1\"\232\001\n\nS"
      "luRequest\0223\n\006config\030\001 \001(\0132!.speechgrinde"
      "r.sgapi.v1.SluConfigH\000\0221\n\005event\030\002 \001(\0132 ."
      "speechgrinder.sgapi.v1.SluEventH\000\022\017\n\005aud"
      "io\030\003 \001(\014H\000B\023\n\021streaming_request\"\247\001\n\tSluC"
      "onfig\022<\n\010encoding\030\001 \001(\0162*.speechgrinder."
      "sgapi.v1.SluConfig.Encoding\022\020\n\010channels\030"
      "\002 \001(\005\022\031\n\021sample_rate_hertz\030\003 \001(\005\022\025\n\rlang"
      "uage_code\030\004 \001(\t\"\030\n\010Encoding\022\014\n\010LINEAR16\020"
      "\000\"_\n\010SluEvent\0225\n\005event\030\001 \001(\0162&.speechgri"
      "nder.sgapi.v1.SluEvent.Event\"\034\n\005Event\022\t\n"
      "\005START\020\000\022\010\n\004STOP\020\001\"\313\001\n\013SluResponse\0225\n\007st"
      "arted\030\001 \001(\0132\".speechgrinder.sgapi.v1.Slu"
      "StartedH\000\0226\n\tutterance\030\002 \001(\0132!.speechgri"
      "nder.sgapi.v1.UtteranceH\000\0227\n\010finished\030\003 "
      "\001(\0132#.speechgrinder.sgapi.v1.SluFinished"
      "H\000B\024\n\022streaming_response\"\"\n\nSluStarted\022\024"
      "\n\014utterance_id\030\001 \001(\t\"T\n\013SluFinished\022\024\n\014u"
      "tterance_id\030\001 \001(\t\022/\n\005error\030\002 \001(\0132 .speec"
      "hgrinder.sgapi.v1.SluError\")\n\010SluError\022\014"
      "\n\004code\030\001 \001(\t\022\017\n\007message\030\002 \001(\t\"\201\001\n\tUttera"
      "nce\022\024\n\014utterance_id\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022"
      "\025\n\rlanguage_code\030\003 \001(\t\0229\n\014alternatives\030\004"
      " \003(\0132#.speechgrinder.sgapi.v1.Alternativ"
      "e\"P\n\013Alternative\022\022\n\nconfidence\030\001 \001(\002\022-\n\006"
      "tokens\030\002 \003(\0132\035.speechgrinder.sgapi.v1.To"
      "ken\"\313\002\n\005Token\022\014\n\004text\030\001 \001(\t\022 \n\030text_with"
      "_trailing_space\030\002 \001(\t\022\r\n\005lemma\030\003 \001(\t\022\013\n\003"
      "pos\030\004 \001(\t\022\013\n\003tag\030\005 \001(\t\022\014\n\004case\030\006 \001(\t\022\016\n\006"
      "number\030\007 \001(\t\022\023\n\013entity_type\030\010 \001(\t\022G\n\022pos"
      "ition_in_entity\030\t \001(\0162+.speechgrinder.sg"
      "api.v1.Token.TokenPosition\022\030\n\020is_segment"
      "_start\030\n \001(\010\022\030\n\020trailing_silence\030\013 \001(\005\"9"
      "\n\rTokenPosition\022\r\n\toutsideOf\020\000\022\013\n\007startO"
      "f\020\001\022\014\n\010insideOf\020\002\"1\n\014LoginRequest\022\021\n\tdev"
      "ice_id\030\001 \001(\t\022\016\n\006app_id\030\002 \001(\t\"\036\n\rLoginRes"
      "ponse\022\r\n\005token\030\001 \001(\t2^\n\003Slu\022W\n\006Stream\022\"."
      "speechgrinder.sgapi.v1.SluRequest\032#.spee"
      "chgrinder.sgapi.v1.SluResponse\"\000(\0010\0012b\n\010"
      "Identity\022V\n\005Login\022$.speechgrinder.sgapi."
      "v1.LoginRequest\032%.speechgrinder.sgapi.v1"
      ".LoginResponse\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1664);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sg.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sg_2eproto
namespace speechgrinder {
namespace sgapi {
namespace v1 {
const ::google::protobuf::EnumDescriptor* SluConfig_Encoding_descriptor() {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sg_2eproto::file_level_enum_descriptors[0];
}
bool SluConfig_Encoding_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SluConfig_Encoding SluConfig::LINEAR16;
const SluConfig_Encoding SluConfig::Encoding_MIN;
const SluConfig_Encoding SluConfig::Encoding_MAX;
const int SluConfig::Encoding_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SluEvent_Event_descriptor() {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sg_2eproto::file_level_enum_descriptors[1];
}
bool SluEvent_Event_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SluEvent_Event SluEvent::START;
const SluEvent_Event SluEvent::STOP;
const SluEvent_Event SluEvent::Event_MIN;
const SluEvent_Event SluEvent::Event_MAX;
const int SluEvent::Event_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Token_TokenPosition_descriptor() {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sg_2eproto::file_level_enum_descriptors[2];
}
bool Token_TokenPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Token_TokenPosition Token::outsideOf;
const Token_TokenPosition Token::startOf;
const Token_TokenPosition Token::insideOf;
const Token_TokenPosition Token::TokenPosition_MIN;
const Token_TokenPosition Token::TokenPosition_MAX;
const int Token::TokenPosition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SluRequest::InitAsDefaultInstance() {
  ::speechgrinder::sgapi::v1::_SluRequest_default_instance_.config_ = const_cast< ::speechgrinder::sgapi::v1::SluConfig*>(
      ::speechgrinder::sgapi::v1::SluConfig::internal_default_instance());
  ::speechgrinder::sgapi::v1::_SluRequest_default_instance_.event_ = const_cast< ::speechgrinder::sgapi::v1::SluEvent*>(
      ::speechgrinder::sgapi::v1::SluEvent::internal_default_instance());
  ::speechgrinder::sgapi::v1::_SluRequest_default_instance_.audio_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SluRequest::set_allocated_config(::speechgrinder::sgapi::v1::SluConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_request();
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
    streaming_request_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:speechgrinder.sgapi.v1.SluRequest.config)
}
void SluRequest::set_allocated_event(::speechgrinder::sgapi::v1::SluEvent* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_request();
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    streaming_request_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:speechgrinder.sgapi.v1.SluRequest.event)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SluRequest::kConfigFieldNumber;
const int SluRequest::kEventFieldNumber;
const int SluRequest::kAudioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SluRequest::SluRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sg_2eproto::scc_info_SluRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechgrinder.sgapi.v1.SluRequest)
}
SluRequest::SluRequest(const SluRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kConfig: {
      mutable_config()->::speechgrinder::sgapi::v1::SluConfig::MergeFrom(from.config());
      break;
    }
    case kEvent: {
      mutable_event()->::speechgrinder::sgapi::v1::SluEvent::MergeFrom(from.event());
      break;
    }
    case kAudio: {
      set_audio(from.audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:speechgrinder.sgapi.v1.SluRequest)
}

void SluRequest::SharedCtor() {
  clear_has_streaming_request();
}

SluRequest::~SluRequest() {
  // @@protoc_insertion_point(destructor:speechgrinder.sgapi.v1.SluRequest)
  SharedDtor();
}

void SluRequest::SharedDtor() {
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void SluRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SluRequest::descriptor() {
  ::protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SluRequest& SluRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sg_2eproto::scc_info_SluRequest.base);
  return *internal_default_instance();
}


void SluRequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:speechgrinder.sgapi.v1.SluRequest)
  switch (streaming_request_case()) {
    case kConfig: {
      delete streaming_request_.config_;
      break;
    }
    case kEvent: {
      delete streaming_request_.event_;
      break;
    }
    case kAudio: {
      streaming_request_.audio_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void SluRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechgrinder.sgapi.v1.SluRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear();
}

bool SluRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechgrinder.sgapi.v1.SluRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speechgrinder.sgapi.v1.SluConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speechgrinder.sgapi.v1.SluEvent event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes audio = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechgrinder.sgapi.v1.SluRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechgrinder.sgapi.v1.SluRequest)
  return false;
#undef DO_
}

void SluRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechgrinder.sgapi.v1.SluRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechgrinder.sgapi.v1.SluConfig config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_config(), output);
  }

  // .speechgrinder.sgapi.v1.SluEvent event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_event(), output);
  }

  // bytes audio = 3;
  if (has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->audio(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speechgrinder.sgapi.v1.SluRequest)
}

::google::protobuf::uint8* SluRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speechgrinder.sgapi.v1.SluRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechgrinder.sgapi.v1.SluConfig config = 1;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_config(), deterministic, target);
  }

  // .speechgrinder.sgapi.v1.SluEvent event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_event(), deterministic, target);
  }

  // bytes audio = 3;
  if (has_audio()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->audio(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechgrinder.sgapi.v1.SluRequest)
  return target;
}

size_t SluRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechgrinder.sgapi.v1.SluRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (streaming_request_case()) {
    // .speechgrinder.sgapi.v1.SluConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *streaming_request_.config_);
      break;
    }
    // .speechgrinder.sgapi.v1.SluEvent event = 2;
    case kEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *streaming_request_.event_);
      break;
    }
    // bytes audio = 3;
    case kAudio: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SluRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechgrinder.sgapi.v1.SluRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SluRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SluRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechgrinder.sgapi.v1.SluRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechgrinder.sgapi.v1.SluRequest)
    MergeFrom(*source);
  }
}

void SluRequest::MergeFrom(const SluRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechgrinder.sgapi.v1.SluRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kConfig: {
      mutable_config()->::speechgrinder::sgapi::v1::SluConfig::MergeFrom(from.config());
      break;
    }
    case kEvent: {
      mutable_event()->::speechgrinder::sgapi::v1::SluEvent::MergeFrom(from.event());
      break;
    }
    case kAudio: {
      set_audio(from.audio());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
}

void SluRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechgrinder.sgapi.v1.SluRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SluRequest::CopyFrom(const SluRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechgrinder.sgapi.v1.SluRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SluRequest::IsInitialized() const {
  return true;
}

void SluRequest::Swap(SluRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SluRequest::InternalSwap(SluRequest* other) {
  using std::swap;
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SluRequest::GetMetadata() const {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SluConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SluConfig::kEncodingFieldNumber;
const int SluConfig::kChannelsFieldNumber;
const int SluConfig::kSampleRateHertzFieldNumber;
const int SluConfig::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SluConfig::SluConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sg_2eproto::scc_info_SluConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechgrinder.sgapi.v1.SluConfig)
}
SluConfig::SluConfig(const SluConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  ::memcpy(&encoding_, &from.encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_hertz_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(sample_rate_hertz_));
  // @@protoc_insertion_point(copy_constructor:speechgrinder.sgapi.v1.SluConfig)
}

void SluConfig::SharedCtor() {
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_hertz_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(sample_rate_hertz_));
}

SluConfig::~SluConfig() {
  // @@protoc_insertion_point(destructor:speechgrinder.sgapi.v1.SluConfig)
  SharedDtor();
}

void SluConfig::SharedDtor() {
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SluConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SluConfig::descriptor() {
  ::protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SluConfig& SluConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sg_2eproto::scc_info_SluConfig.base);
  return *internal_default_instance();
}


void SluConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:speechgrinder.sgapi.v1.SluConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_hertz_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(sample_rate_hertz_));
  _internal_metadata_.Clear();
}

bool SluConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechgrinder.sgapi.v1.SluConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speechgrinder.sgapi.v1.SluConfig.Encoding encoding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::speechgrinder::sgapi::v1::SluConfig_Encoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sample_rate_hertz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.SluConfig.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechgrinder.sgapi.v1.SluConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechgrinder.sgapi.v1.SluConfig)
  return false;
#undef DO_
}

void SluConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechgrinder.sgapi.v1.SluConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechgrinder.sgapi.v1.SluConfig.Encoding encoding = 1;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // int32 channels = 2;
  if (this->channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // int32 sample_rate_hertz = 3;
  if (this->sample_rate_hertz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sample_rate_hertz(), output);
  }

  // string language_code = 4;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.SluConfig.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->language_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speechgrinder.sgapi.v1.SluConfig)
}

::google::protobuf::uint8* SluConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speechgrinder.sgapi.v1.SluConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechgrinder.sgapi.v1.SluConfig.Encoding encoding = 1;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->encoding(), target);
  }

  // int32 channels = 2;
  if (this->channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  // int32 sample_rate_hertz = 3;
  if (this->sample_rate_hertz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sample_rate_hertz(), target);
  }

  // string language_code = 4;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.SluConfig.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->language_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechgrinder.sgapi.v1.SluConfig)
  return target;
}

size_t SluConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechgrinder.sgapi.v1.SluConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string language_code = 4;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  // .speechgrinder.sgapi.v1.SluConfig.Encoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // int32 channels = 2;
  if (this->channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channels());
  }

  // int32 sample_rate_hertz = 3;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate_hertz());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SluConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechgrinder.sgapi.v1.SluConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SluConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SluConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechgrinder.sgapi.v1.SluConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechgrinder.sgapi.v1.SluConfig)
    MergeFrom(*source);
  }
}

void SluConfig::MergeFrom(const SluConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechgrinder.sgapi.v1.SluConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.channels() != 0) {
    set_channels(from.channels());
  }
  if (from.sample_rate_hertz() != 0) {
    set_sample_rate_hertz(from.sample_rate_hertz());
  }
}

void SluConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechgrinder.sgapi.v1.SluConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SluConfig::CopyFrom(const SluConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechgrinder.sgapi.v1.SluConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SluConfig::IsInitialized() const {
  return true;
}

void SluConfig::Swap(SluConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SluConfig::InternalSwap(SluConfig* other) {
  using std::swap;
  language_code_.Swap(&other->language_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encoding_, other->encoding_);
  swap(channels_, other->channels_);
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SluConfig::GetMetadata() const {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SluEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SluEvent::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SluEvent::SluEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sg_2eproto::scc_info_SluEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechgrinder.sgapi.v1.SluEvent)
}
SluEvent::SluEvent(const SluEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:speechgrinder.sgapi.v1.SluEvent)
}

void SluEvent::SharedCtor() {
  event_ = 0;
}

SluEvent::~SluEvent() {
  // @@protoc_insertion_point(destructor:speechgrinder.sgapi.v1.SluEvent)
  SharedDtor();
}

void SluEvent::SharedDtor() {
}

void SluEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SluEvent::descriptor() {
  ::protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SluEvent& SluEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sg_2eproto::scc_info_SluEvent.base);
  return *internal_default_instance();
}


void SluEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:speechgrinder.sgapi.v1.SluEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_ = 0;
  _internal_metadata_.Clear();
}

bool SluEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechgrinder.sgapi.v1.SluEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speechgrinder.sgapi.v1.SluEvent.Event event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event(static_cast< ::speechgrinder::sgapi::v1::SluEvent_Event >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechgrinder.sgapi.v1.SluEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechgrinder.sgapi.v1.SluEvent)
  return false;
#undef DO_
}

void SluEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechgrinder.sgapi.v1.SluEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechgrinder.sgapi.v1.SluEvent.Event event = 1;
  if (this->event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speechgrinder.sgapi.v1.SluEvent)
}

::google::protobuf::uint8* SluEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speechgrinder.sgapi.v1.SluEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechgrinder.sgapi.v1.SluEvent.Event event = 1;
  if (this->event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechgrinder.sgapi.v1.SluEvent)
  return target;
}

size_t SluEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechgrinder.sgapi.v1.SluEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .speechgrinder.sgapi.v1.SluEvent.Event event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SluEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechgrinder.sgapi.v1.SluEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SluEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SluEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechgrinder.sgapi.v1.SluEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechgrinder.sgapi.v1.SluEvent)
    MergeFrom(*source);
  }
}

void SluEvent::MergeFrom(const SluEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechgrinder.sgapi.v1.SluEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event() != 0) {
    set_event(from.event());
  }
}

void SluEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechgrinder.sgapi.v1.SluEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SluEvent::CopyFrom(const SluEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechgrinder.sgapi.v1.SluEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SluEvent::IsInitialized() const {
  return true;
}

void SluEvent::Swap(SluEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SluEvent::InternalSwap(SluEvent* other) {
  using std::swap;
  swap(event_, other->event_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SluEvent::GetMetadata() const {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SluResponse::InitAsDefaultInstance() {
  ::speechgrinder::sgapi::v1::_SluResponse_default_instance_.started_ = const_cast< ::speechgrinder::sgapi::v1::SluStarted*>(
      ::speechgrinder::sgapi::v1::SluStarted::internal_default_instance());
  ::speechgrinder::sgapi::v1::_SluResponse_default_instance_.utterance_ = const_cast< ::speechgrinder::sgapi::v1::Utterance*>(
      ::speechgrinder::sgapi::v1::Utterance::internal_default_instance());
  ::speechgrinder::sgapi::v1::_SluResponse_default_instance_.finished_ = const_cast< ::speechgrinder::sgapi::v1::SluFinished*>(
      ::speechgrinder::sgapi::v1::SluFinished::internal_default_instance());
}
void SluResponse::set_allocated_started(::speechgrinder::sgapi::v1::SluStarted* started) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (started) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      started = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, started, submessage_arena);
    }
    set_has_started();
    streaming_response_.started_ = started;
  }
  // @@protoc_insertion_point(field_set_allocated:speechgrinder.sgapi.v1.SluResponse.started)
}
void SluResponse::set_allocated_utterance(::speechgrinder::sgapi::v1::Utterance* utterance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (utterance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      utterance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, utterance, submessage_arena);
    }
    set_has_utterance();
    streaming_response_.utterance_ = utterance;
  }
  // @@protoc_insertion_point(field_set_allocated:speechgrinder.sgapi.v1.SluResponse.utterance)
}
void SluResponse::set_allocated_finished(::speechgrinder::sgapi::v1::SluFinished* finished) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (finished) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      finished = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, finished, submessage_arena);
    }
    set_has_finished();
    streaming_response_.finished_ = finished;
  }
  // @@protoc_insertion_point(field_set_allocated:speechgrinder.sgapi.v1.SluResponse.finished)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SluResponse::kStartedFieldNumber;
const int SluResponse::kUtteranceFieldNumber;
const int SluResponse::kFinishedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SluResponse::SluResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sg_2eproto::scc_info_SluResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechgrinder.sgapi.v1.SluResponse)
}
SluResponse::SluResponse(const SluResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_streaming_response();
  switch (from.streaming_response_case()) {
    case kStarted: {
      mutable_started()->::speechgrinder::sgapi::v1::SluStarted::MergeFrom(from.started());
      break;
    }
    case kUtterance: {
      mutable_utterance()->::speechgrinder::sgapi::v1::Utterance::MergeFrom(from.utterance());
      break;
    }
    case kFinished: {
      mutable_finished()->::speechgrinder::sgapi::v1::SluFinished::MergeFrom(from.finished());
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:speechgrinder.sgapi.v1.SluResponse)
}

void SluResponse::SharedCtor() {
  clear_has_streaming_response();
}

SluResponse::~SluResponse() {
  // @@protoc_insertion_point(destructor:speechgrinder.sgapi.v1.SluResponse)
  SharedDtor();
}

void SluResponse::SharedDtor() {
  if (has_streaming_response()) {
    clear_streaming_response();
  }
}

void SluResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SluResponse::descriptor() {
  ::protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SluResponse& SluResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sg_2eproto::scc_info_SluResponse.base);
  return *internal_default_instance();
}


void SluResponse::clear_streaming_response() {
// @@protoc_insertion_point(one_of_clear_start:speechgrinder.sgapi.v1.SluResponse)
  switch (streaming_response_case()) {
    case kStarted: {
      delete streaming_response_.started_;
      break;
    }
    case kUtterance: {
      delete streaming_response_.utterance_;
      break;
    }
    case kFinished: {
      delete streaming_response_.finished_;
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_RESPONSE_NOT_SET;
}


void SluResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechgrinder.sgapi.v1.SluResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_response();
  _internal_metadata_.Clear();
}

bool SluResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechgrinder.sgapi.v1.SluResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speechgrinder.sgapi.v1.SluStarted started = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_started()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speechgrinder.sgapi.v1.Utterance utterance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_utterance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speechgrinder.sgapi.v1.SluFinished finished = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_finished()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechgrinder.sgapi.v1.SluResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechgrinder.sgapi.v1.SluResponse)
  return false;
#undef DO_
}

void SluResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechgrinder.sgapi.v1.SluResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechgrinder.sgapi.v1.SluStarted started = 1;
  if (has_started()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_started(), output);
  }

  // .speechgrinder.sgapi.v1.Utterance utterance = 2;
  if (has_utterance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_utterance(), output);
  }

  // .speechgrinder.sgapi.v1.SluFinished finished = 3;
  if (has_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_finished(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speechgrinder.sgapi.v1.SluResponse)
}

::google::protobuf::uint8* SluResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speechgrinder.sgapi.v1.SluResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speechgrinder.sgapi.v1.SluStarted started = 1;
  if (has_started()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_started(), deterministic, target);
  }

  // .speechgrinder.sgapi.v1.Utterance utterance = 2;
  if (has_utterance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_utterance(), deterministic, target);
  }

  // .speechgrinder.sgapi.v1.SluFinished finished = 3;
  if (has_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_finished(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechgrinder.sgapi.v1.SluResponse)
  return target;
}

size_t SluResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechgrinder.sgapi.v1.SluResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (streaming_response_case()) {
    // .speechgrinder.sgapi.v1.SluStarted started = 1;
    case kStarted: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *streaming_response_.started_);
      break;
    }
    // .speechgrinder.sgapi.v1.Utterance utterance = 2;
    case kUtterance: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *streaming_response_.utterance_);
      break;
    }
    // .speechgrinder.sgapi.v1.SluFinished finished = 3;
    case kFinished: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *streaming_response_.finished_);
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SluResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechgrinder.sgapi.v1.SluResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SluResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SluResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechgrinder.sgapi.v1.SluResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechgrinder.sgapi.v1.SluResponse)
    MergeFrom(*source);
  }
}

void SluResponse::MergeFrom(const SluResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechgrinder.sgapi.v1.SluResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_response_case()) {
    case kStarted: {
      mutable_started()->::speechgrinder::sgapi::v1::SluStarted::MergeFrom(from.started());
      break;
    }
    case kUtterance: {
      mutable_utterance()->::speechgrinder::sgapi::v1::Utterance::MergeFrom(from.utterance());
      break;
    }
    case kFinished: {
      mutable_finished()->::speechgrinder::sgapi::v1::SluFinished::MergeFrom(from.finished());
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
}

void SluResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechgrinder.sgapi.v1.SluResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SluResponse::CopyFrom(const SluResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechgrinder.sgapi.v1.SluResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SluResponse::IsInitialized() const {
  return true;
}

void SluResponse::Swap(SluResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SluResponse::InternalSwap(SluResponse* other) {
  using std::swap;
  swap(streaming_response_, other->streaming_response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SluResponse::GetMetadata() const {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SluStarted::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SluStarted::kUtteranceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SluStarted::SluStarted()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sg_2eproto::scc_info_SluStarted.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechgrinder.sgapi.v1.SluStarted)
}
SluStarted::SluStarted(const SluStarted& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  utterance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.utterance_id().size() > 0) {
    utterance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.utterance_id_);
  }
  // @@protoc_insertion_point(copy_constructor:speechgrinder.sgapi.v1.SluStarted)
}

void SluStarted::SharedCtor() {
  utterance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SluStarted::~SluStarted() {
  // @@protoc_insertion_point(destructor:speechgrinder.sgapi.v1.SluStarted)
  SharedDtor();
}

void SluStarted::SharedDtor() {
  utterance_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SluStarted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SluStarted::descriptor() {
  ::protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SluStarted& SluStarted::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sg_2eproto::scc_info_SluStarted.base);
  return *internal_default_instance();
}


void SluStarted::Clear() {
// @@protoc_insertion_point(message_clear_start:speechgrinder.sgapi.v1.SluStarted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utterance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SluStarted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechgrinder.sgapi.v1.SluStarted)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string utterance_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_utterance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->utterance_id().data(), static_cast<int>(this->utterance_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.SluStarted.utterance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechgrinder.sgapi.v1.SluStarted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechgrinder.sgapi.v1.SluStarted)
  return false;
#undef DO_
}

void SluStarted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechgrinder.sgapi.v1.SluStarted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string utterance_id = 1;
  if (this->utterance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->utterance_id().data(), static_cast<int>(this->utterance_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.SluStarted.utterance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->utterance_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speechgrinder.sgapi.v1.SluStarted)
}

::google::protobuf::uint8* SluStarted::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speechgrinder.sgapi.v1.SluStarted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string utterance_id = 1;
  if (this->utterance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->utterance_id().data(), static_cast<int>(this->utterance_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.SluStarted.utterance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->utterance_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechgrinder.sgapi.v1.SluStarted)
  return target;
}

size_t SluStarted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechgrinder.sgapi.v1.SluStarted)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string utterance_id = 1;
  if (this->utterance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->utterance_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SluStarted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechgrinder.sgapi.v1.SluStarted)
  GOOGLE_DCHECK_NE(&from, this);
  const SluStarted* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SluStarted>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechgrinder.sgapi.v1.SluStarted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechgrinder.sgapi.v1.SluStarted)
    MergeFrom(*source);
  }
}

void SluStarted::MergeFrom(const SluStarted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechgrinder.sgapi.v1.SluStarted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.utterance_id().size() > 0) {

    utterance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.utterance_id_);
  }
}

void SluStarted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechgrinder.sgapi.v1.SluStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SluStarted::CopyFrom(const SluStarted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechgrinder.sgapi.v1.SluStarted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SluStarted::IsInitialized() const {
  return true;
}

void SluStarted::Swap(SluStarted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SluStarted::InternalSwap(SluStarted* other) {
  using std::swap;
  utterance_id_.Swap(&other->utterance_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SluStarted::GetMetadata() const {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SluFinished::InitAsDefaultInstance() {
  ::speechgrinder::sgapi::v1::_SluFinished_default_instance_._instance.get_mutable()->error_ = const_cast< ::speechgrinder::sgapi::v1::SluError*>(
      ::speechgrinder::sgapi::v1::SluError::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SluFinished::kUtteranceIdFieldNumber;
const int SluFinished::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SluFinished::SluFinished()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sg_2eproto::scc_info_SluFinished.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechgrinder.sgapi.v1.SluFinished)
}
SluFinished::SluFinished(const SluFinished& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  utterance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.utterance_id().size() > 0) {
    utterance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.utterance_id_);
  }
  if (from.has_error()) {
    error_ = new ::speechgrinder::sgapi::v1::SluError(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:speechgrinder.sgapi.v1.SluFinished)
}

void SluFinished::SharedCtor() {
  utterance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
}

SluFinished::~SluFinished() {
  // @@protoc_insertion_point(destructor:speechgrinder.sgapi.v1.SluFinished)
  SharedDtor();
}

void SluFinished::SharedDtor() {
  utterance_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void SluFinished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SluFinished::descriptor() {
  ::protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SluFinished& SluFinished::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sg_2eproto::scc_info_SluFinished.base);
  return *internal_default_instance();
}


void SluFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:speechgrinder.sgapi.v1.SluFinished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utterance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  _internal_metadata_.Clear();
}

bool SluFinished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechgrinder.sgapi.v1.SluFinished)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string utterance_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_utterance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->utterance_id().data(), static_cast<int>(this->utterance_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.SluFinished.utterance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speechgrinder.sgapi.v1.SluError error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechgrinder.sgapi.v1.SluFinished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechgrinder.sgapi.v1.SluFinished)
  return false;
#undef DO_
}

void SluFinished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechgrinder.sgapi.v1.SluFinished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string utterance_id = 1;
  if (this->utterance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->utterance_id().data(), static_cast<int>(this->utterance_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.SluFinished.utterance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->utterance_id(), output);
  }

  // .speechgrinder.sgapi.v1.SluError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_error(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speechgrinder.sgapi.v1.SluFinished)
}

::google::protobuf::uint8* SluFinished::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speechgrinder.sgapi.v1.SluFinished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string utterance_id = 1;
  if (this->utterance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->utterance_id().data(), static_cast<int>(this->utterance_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.SluFinished.utterance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->utterance_id(), target);
  }

  // .speechgrinder.sgapi.v1.SluError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_error(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechgrinder.sgapi.v1.SluFinished)
  return target;
}

size_t SluFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechgrinder.sgapi.v1.SluFinished)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string utterance_id = 1;
  if (this->utterance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->utterance_id());
  }

  // .speechgrinder.sgapi.v1.SluError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SluFinished::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechgrinder.sgapi.v1.SluFinished)
  GOOGLE_DCHECK_NE(&from, this);
  const SluFinished* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SluFinished>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechgrinder.sgapi.v1.SluFinished)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechgrinder.sgapi.v1.SluFinished)
    MergeFrom(*source);
  }
}

void SluFinished::MergeFrom(const SluFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechgrinder.sgapi.v1.SluFinished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.utterance_id().size() > 0) {

    utterance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.utterance_id_);
  }
  if (from.has_error()) {
    mutable_error()->::speechgrinder::sgapi::v1::SluError::MergeFrom(from.error());
  }
}

void SluFinished::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechgrinder.sgapi.v1.SluFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SluFinished::CopyFrom(const SluFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechgrinder.sgapi.v1.SluFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SluFinished::IsInitialized() const {
  return true;
}

void SluFinished::Swap(SluFinished* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SluFinished::InternalSwap(SluFinished* other) {
  using std::swap;
  utterance_id_.Swap(&other->utterance_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SluFinished::GetMetadata() const {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SluError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SluError::kCodeFieldNumber;
const int SluError::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SluError::SluError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sg_2eproto::scc_info_SluError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechgrinder.sgapi.v1.SluError)
}
SluError::SluError(const SluError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.code().size() > 0) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:speechgrinder.sgapi.v1.SluError)
}

void SluError::SharedCtor() {
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SluError::~SluError() {
  // @@protoc_insertion_point(destructor:speechgrinder.sgapi.v1.SluError)
  SharedDtor();
}

void SluError::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SluError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SluError::descriptor() {
  ::protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SluError& SluError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sg_2eproto::scc_info_SluError.base);
  return *internal_default_instance();
}


void SluError::Clear() {
// @@protoc_insertion_point(message_clear_start:speechgrinder.sgapi.v1.SluError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SluError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechgrinder.sgapi.v1.SluError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.SluError.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.SluError.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechgrinder.sgapi.v1.SluError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechgrinder.sgapi.v1.SluError)
  return false;
#undef DO_
}

void SluError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechgrinder.sgapi.v1.SluError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.SluError.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.SluError.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speechgrinder.sgapi.v1.SluError)
}

::google::protobuf::uint8* SluError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speechgrinder.sgapi.v1.SluError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.SluError.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.SluError.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechgrinder.sgapi.v1.SluError)
  return target;
}

size_t SluError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechgrinder.sgapi.v1.SluError)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SluError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechgrinder.sgapi.v1.SluError)
  GOOGLE_DCHECK_NE(&from, this);
  const SluError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SluError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechgrinder.sgapi.v1.SluError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechgrinder.sgapi.v1.SluError)
    MergeFrom(*source);
  }
}

void SluError::MergeFrom(const SluError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechgrinder.sgapi.v1.SluError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void SluError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechgrinder.sgapi.v1.SluError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SluError::CopyFrom(const SluError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechgrinder.sgapi.v1.SluError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SluError::IsInitialized() const {
  return true;
}

void SluError::Swap(SluError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SluError::InternalSwap(SluError* other) {
  using std::swap;
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SluError::GetMetadata() const {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Utterance::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Utterance::kUtteranceIdFieldNumber;
const int Utterance::kTypeFieldNumber;
const int Utterance::kLanguageCodeFieldNumber;
const int Utterance::kAlternativesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Utterance::Utterance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sg_2eproto::scc_info_Utterance.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechgrinder.sgapi.v1.Utterance)
}
Utterance::Utterance(const Utterance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alternatives_(from.alternatives_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  utterance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.utterance_id().size() > 0) {
    utterance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.utterance_id_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  // @@protoc_insertion_point(copy_constructor:speechgrinder.sgapi.v1.Utterance)
}

void Utterance::SharedCtor() {
  utterance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Utterance::~Utterance() {
  // @@protoc_insertion_point(destructor:speechgrinder.sgapi.v1.Utterance)
  SharedDtor();
}

void Utterance::SharedDtor() {
  utterance_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Utterance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Utterance::descriptor() {
  ::protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Utterance& Utterance::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sg_2eproto::scc_info_Utterance.base);
  return *internal_default_instance();
}


void Utterance::Clear() {
// @@protoc_insertion_point(message_clear_start:speechgrinder.sgapi.v1.Utterance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternatives_.Clear();
  utterance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Utterance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechgrinder.sgapi.v1.Utterance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string utterance_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_utterance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->utterance_id().data(), static_cast<int>(this->utterance_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.Utterance.utterance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.Utterance.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.Utterance.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .speechgrinder.sgapi.v1.Alternative alternatives = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_alternatives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechgrinder.sgapi.v1.Utterance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechgrinder.sgapi.v1.Utterance)
  return false;
#undef DO_
}

void Utterance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechgrinder.sgapi.v1.Utterance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string utterance_id = 1;
  if (this->utterance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->utterance_id().data(), static_cast<int>(this->utterance_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Utterance.utterance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->utterance_id(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Utterance.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Utterance.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->language_code(), output);
  }

  // repeated .speechgrinder.sgapi.v1.Alternative alternatives = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->alternatives(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speechgrinder.sgapi.v1.Utterance)
}

::google::protobuf::uint8* Utterance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speechgrinder.sgapi.v1.Utterance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string utterance_id = 1;
  if (this->utterance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->utterance_id().data(), static_cast<int>(this->utterance_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Utterance.utterance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->utterance_id(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Utterance.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Utterance.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language_code(), target);
  }

  // repeated .speechgrinder.sgapi.v1.Alternative alternatives = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->alternatives(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechgrinder.sgapi.v1.Utterance)
  return target;
}

size_t Utterance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechgrinder.sgapi.v1.Utterance)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .speechgrinder.sgapi.v1.Alternative alternatives = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->alternatives_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->alternatives(static_cast<int>(i)));
    }
  }

  // string utterance_id = 1;
  if (this->utterance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->utterance_id());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Utterance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechgrinder.sgapi.v1.Utterance)
  GOOGLE_DCHECK_NE(&from, this);
  const Utterance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Utterance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechgrinder.sgapi.v1.Utterance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechgrinder.sgapi.v1.Utterance)
    MergeFrom(*source);
  }
}

void Utterance::MergeFrom(const Utterance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechgrinder.sgapi.v1.Utterance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternatives_.MergeFrom(from.alternatives_);
  if (from.utterance_id().size() > 0) {

    utterance_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.utterance_id_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
}

void Utterance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechgrinder.sgapi.v1.Utterance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Utterance::CopyFrom(const Utterance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechgrinder.sgapi.v1.Utterance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Utterance::IsInitialized() const {
  return true;
}

void Utterance::Swap(Utterance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Utterance::InternalSwap(Utterance* other) {
  using std::swap;
  CastToBase(&alternatives_)->InternalSwap(CastToBase(&other->alternatives_));
  utterance_id_.Swap(&other->utterance_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_code_.Swap(&other->language_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Utterance::GetMetadata() const {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Alternative::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Alternative::kConfidenceFieldNumber;
const int Alternative::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Alternative::Alternative()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sg_2eproto::scc_info_Alternative.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechgrinder.sgapi.v1.Alternative)
}
Alternative::Alternative(const Alternative& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:speechgrinder.sgapi.v1.Alternative)
}

void Alternative::SharedCtor() {
  confidence_ = 0;
}

Alternative::~Alternative() {
  // @@protoc_insertion_point(destructor:speechgrinder.sgapi.v1.Alternative)
  SharedDtor();
}

void Alternative::SharedDtor() {
}

void Alternative::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Alternative::descriptor() {
  ::protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Alternative& Alternative::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sg_2eproto::scc_info_Alternative.base);
  return *internal_default_instance();
}


void Alternative::Clear() {
// @@protoc_insertion_point(message_clear_start:speechgrinder.sgapi.v1.Alternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  confidence_ = 0;
  _internal_metadata_.Clear();
}

bool Alternative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechgrinder.sgapi.v1.Alternative)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float confidence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .speechgrinder.sgapi.v1.Token tokens = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechgrinder.sgapi.v1.Alternative)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechgrinder.sgapi.v1.Alternative)
  return false;
#undef DO_
}

void Alternative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechgrinder.sgapi.v1.Alternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float confidence = 1;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // repeated .speechgrinder.sgapi.v1.Token tokens = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tokens(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speechgrinder.sgapi.v1.Alternative)
}

::google::protobuf::uint8* Alternative::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speechgrinder.sgapi.v1.Alternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float confidence = 1;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // repeated .speechgrinder.sgapi.v1.Token tokens = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tokens(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechgrinder.sgapi.v1.Alternative)
  return target;
}

size_t Alternative::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechgrinder.sgapi.v1.Alternative)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .speechgrinder.sgapi.v1.Token tokens = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tokens_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tokens(static_cast<int>(i)));
    }
  }

  // float confidence = 1;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Alternative::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechgrinder.sgapi.v1.Alternative)
  GOOGLE_DCHECK_NE(&from, this);
  const Alternative* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Alternative>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechgrinder.sgapi.v1.Alternative)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechgrinder.sgapi.v1.Alternative)
    MergeFrom(*source);
  }
}

void Alternative::MergeFrom(const Alternative& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechgrinder.sgapi.v1.Alternative)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void Alternative::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechgrinder.sgapi.v1.Alternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alternative::CopyFrom(const Alternative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechgrinder.sgapi.v1.Alternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alternative::IsInitialized() const {
  return true;
}

void Alternative::Swap(Alternative* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Alternative::InternalSwap(Alternative* other) {
  using std::swap;
  CastToBase(&tokens_)->InternalSwap(CastToBase(&other->tokens_));
  swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Alternative::GetMetadata() const {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Token::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Token::kTextFieldNumber;
const int Token::kTextWithTrailingSpaceFieldNumber;
const int Token::kLemmaFieldNumber;
const int Token::kPosFieldNumber;
const int Token::kTagFieldNumber;
const int Token::kCaseFieldNumber;
const int Token::kNumberFieldNumber;
const int Token::kEntityTypeFieldNumber;
const int Token::kPositionInEntityFieldNumber;
const int Token::kIsSegmentStartFieldNumber;
const int Token::kTrailingSilenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Token::Token()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sg_2eproto::scc_info_Token.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechgrinder.sgapi.v1.Token)
}
Token::Token(const Token& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  text_with_trailing_space_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text_with_trailing_space().size() > 0) {
    text_with_trailing_space_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_with_trailing_space_);
  }
  lemma_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lemma().size() > 0) {
    lemma_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lemma_);
  }
  pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pos().size() > 0) {
    pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pos_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag().size() > 0) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  case__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.case_().size() > 0) {
    case__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.case__);
  }
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.number().size() > 0) {
    number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  entity_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.entity_type().size() > 0) {
    entity_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_type_);
  }
  ::memcpy(&position_in_entity_, &from.position_in_entity_,
    static_cast<size_t>(reinterpret_cast<char*>(&trailing_silence_) -
    reinterpret_cast<char*>(&position_in_entity_)) + sizeof(trailing_silence_));
  // @@protoc_insertion_point(copy_constructor:speechgrinder.sgapi.v1.Token)
}

void Token::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_with_trailing_space_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lemma_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  case__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_in_entity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trailing_silence_) -
      reinterpret_cast<char*>(&position_in_entity_)) + sizeof(trailing_silence_));
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:speechgrinder.sgapi.v1.Token)
  SharedDtor();
}

void Token::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_with_trailing_space_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lemma_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  case__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Token::descriptor() {
  ::protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Token& Token::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sg_2eproto::scc_info_Token.base);
  return *internal_default_instance();
}


void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:speechgrinder.sgapi.v1.Token)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_with_trailing_space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lemma_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  case__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_in_entity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trailing_silence_) -
      reinterpret_cast<char*>(&position_in_entity_)) + sizeof(trailing_silence_));
  _internal_metadata_.Clear();
}

bool Token::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechgrinder.sgapi.v1.Token)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.Token.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text_with_trailing_space = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_with_trailing_space()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text_with_trailing_space().data(), static_cast<int>(this->text_with_trailing_space().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.Token.text_with_trailing_space"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lemma = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lemma()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lemma().data(), static_cast<int>(this->lemma().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.Token.lemma"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pos()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pos().data(), static_cast<int>(this->pos().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.Token.pos"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.Token.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string case = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_case_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->case_().data(), static_cast<int>(this->case_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.Token.case"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->number().data(), static_cast<int>(this->number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.Token.number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string entity_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entity_type().data(), static_cast<int>(this->entity_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.Token.entity_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speechgrinder.sgapi.v1.Token.TokenPosition position_in_entity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position_in_entity(static_cast< ::speechgrinder::sgapi::v1::Token_TokenPosition >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_segment_start = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_segment_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trailing_silence = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trailing_silence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechgrinder.sgapi.v1.Token)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechgrinder.sgapi.v1.Token)
  return false;
#undef DO_
}

void Token::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechgrinder.sgapi.v1.Token)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // string text_with_trailing_space = 2;
  if (this->text_with_trailing_space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_with_trailing_space().data(), static_cast<int>(this->text_with_trailing_space().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.text_with_trailing_space");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text_with_trailing_space(), output);
  }

  // string lemma = 3;
  if (this->lemma().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lemma().data(), static_cast<int>(this->lemma().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.lemma");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lemma(), output);
  }

  // string pos = 4;
  if (this->pos().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pos().data(), static_cast<int>(this->pos().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pos(), output);
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tag(), output);
  }

  // string case = 6;
  if (this->case_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->case_().data(), static_cast<int>(this->case_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.case");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->case_(), output);
  }

  // string number = 7;
  if (this->number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->number().data(), static_cast<int>(this->number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->number(), output);
  }

  // string entity_type = 8;
  if (this->entity_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity_type().data(), static_cast<int>(this->entity_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.entity_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->entity_type(), output);
  }

  // .speechgrinder.sgapi.v1.Token.TokenPosition position_in_entity = 9;
  if (this->position_in_entity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->position_in_entity(), output);
  }

  // bool is_segment_start = 10;
  if (this->is_segment_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_segment_start(), output);
  }

  // int32 trailing_silence = 11;
  if (this->trailing_silence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->trailing_silence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speechgrinder.sgapi.v1.Token)
}

::google::protobuf::uint8* Token::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speechgrinder.sgapi.v1.Token)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // string text_with_trailing_space = 2;
  if (this->text_with_trailing_space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_with_trailing_space().data(), static_cast<int>(this->text_with_trailing_space().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.text_with_trailing_space");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text_with_trailing_space(), target);
  }

  // string lemma = 3;
  if (this->lemma().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lemma().data(), static_cast<int>(this->lemma().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.lemma");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lemma(), target);
  }

  // string pos = 4;
  if (this->pos().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pos().data(), static_cast<int>(this->pos().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pos(), target);
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tag(), target);
  }

  // string case = 6;
  if (this->case_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->case_().data(), static_cast<int>(this->case_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.case");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->case_(), target);
  }

  // string number = 7;
  if (this->number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->number().data(), static_cast<int>(this->number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->number(), target);
  }

  // string entity_type = 8;
  if (this->entity_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity_type().data(), static_cast<int>(this->entity_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.Token.entity_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->entity_type(), target);
  }

  // .speechgrinder.sgapi.v1.Token.TokenPosition position_in_entity = 9;
  if (this->position_in_entity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->position_in_entity(), target);
  }

  // bool is_segment_start = 10;
  if (this->is_segment_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_segment_start(), target);
  }

  // int32 trailing_silence = 11;
  if (this->trailing_silence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->trailing_silence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechgrinder.sgapi.v1.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechgrinder.sgapi.v1.Token)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // string text_with_trailing_space = 2;
  if (this->text_with_trailing_space().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_with_trailing_space());
  }

  // string lemma = 3;
  if (this->lemma().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lemma());
  }

  // string pos = 4;
  if (this->pos().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pos());
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // string case = 6;
  if (this->case_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->case_());
  }

  // string number = 7;
  if (this->number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->number());
  }

  // string entity_type = 8;
  if (this->entity_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entity_type());
  }

  // .speechgrinder.sgapi.v1.Token.TokenPosition position_in_entity = 9;
  if (this->position_in_entity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_in_entity());
  }

  // bool is_segment_start = 10;
  if (this->is_segment_start() != 0) {
    total_size += 1 + 1;
  }

  // int32 trailing_silence = 11;
  if (this->trailing_silence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trailing_silence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Token::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechgrinder.sgapi.v1.Token)
  GOOGLE_DCHECK_NE(&from, this);
  const Token* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Token>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechgrinder.sgapi.v1.Token)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechgrinder.sgapi.v1.Token)
    MergeFrom(*source);
  }
}

void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechgrinder.sgapi.v1.Token)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.text_with_trailing_space().size() > 0) {

    text_with_trailing_space_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_with_trailing_space_);
  }
  if (from.lemma().size() > 0) {

    lemma_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lemma_);
  }
  if (from.pos().size() > 0) {

    pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pos_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.case_().size() > 0) {

    case__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.case__);
  }
  if (from.number().size() > 0) {

    number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  if (from.entity_type().size() > 0) {

    entity_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_type_);
  }
  if (from.position_in_entity() != 0) {
    set_position_in_entity(from.position_in_entity());
  }
  if (from.is_segment_start() != 0) {
    set_is_segment_start(from.is_segment_start());
  }
  if (from.trailing_silence() != 0) {
    set_trailing_silence(from.trailing_silence());
  }
}

void Token::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechgrinder.sgapi.v1.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechgrinder.sgapi.v1.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::Swap(Token* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Token::InternalSwap(Token* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_with_trailing_space_.Swap(&other->text_with_trailing_space_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lemma_.Swap(&other->lemma_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pos_.Swap(&other->pos_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  case__.Swap(&other->case__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  number_.Swap(&other->number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entity_type_.Swap(&other->entity_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_in_entity_, other->position_in_entity_);
  swap(is_segment_start_, other->is_segment_start_);
  swap(trailing_silence_, other->trailing_silence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Token::GetMetadata() const {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kDeviceIdFieldNumber;
const int LoginRequest::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sg_2eproto::scc_info_LoginRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechgrinder.sgapi.v1.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_id().size() > 0) {
    device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:speechgrinder.sgapi.v1.LoginRequest)
}

void LoginRequest::SharedCtor() {
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:speechgrinder.sgapi.v1.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  ::protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRequest& LoginRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sg_2eproto::scc_info_LoginRequest.base);
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:speechgrinder.sgapi.v1.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechgrinder.sgapi.v1.LoginRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_id().data(), static_cast<int>(this->device_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.LoginRequest.device_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), static_cast<int>(this->app_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.LoginRequest.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechgrinder.sgapi.v1.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechgrinder.sgapi.v1.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechgrinder.sgapi.v1.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id().data(), static_cast<int>(this->device_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.LoginRequest.device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_id(), output);
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), static_cast<int>(this->app_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.LoginRequest.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speechgrinder.sgapi.v1.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speechgrinder.sgapi.v1.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id().data(), static_cast<int>(this->device_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.LoginRequest.device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), static_cast<int>(this->app_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.LoginRequest.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechgrinder.sgapi.v1.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechgrinder.sgapi.v1.LoginRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_id());
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechgrinder.sgapi.v1.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechgrinder.sgapi.v1.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechgrinder.sgapi.v1.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechgrinder.sgapi.v1.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechgrinder.sgapi.v1.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechgrinder.sgapi.v1.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  device_id_.Swap(&other->device_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_id_.Swap(&other->app_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sg_2eproto::scc_info_LoginResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:speechgrinder.sgapi.v1.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:speechgrinder.sgapi.v1.LoginResponse)
}

void LoginResponse::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:speechgrinder.sgapi.v1.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  ::protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginResponse& LoginResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sg_2eproto::scc_info_LoginResponse.base);
  return *internal_default_instance();
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:speechgrinder.sgapi.v1.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speechgrinder.sgapi.v1.LoginResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speechgrinder.sgapi.v1.LoginResponse.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speechgrinder.sgapi.v1.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speechgrinder.sgapi.v1.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speechgrinder.sgapi.v1.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.LoginResponse.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speechgrinder.sgapi.v1.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speechgrinder.sgapi.v1.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speechgrinder.sgapi.v1.LoginResponse.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speechgrinder.sgapi.v1.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speechgrinder.sgapi.v1.LoginResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speechgrinder.sgapi.v1.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speechgrinder.sgapi.v1.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speechgrinder.sgapi.v1.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speechgrinder.sgapi.v1.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speechgrinder.sgapi.v1.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speechgrinder.sgapi.v1.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_sg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace sgapi
}  // namespace speechgrinder
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::speechgrinder::sgapi::v1::SluRequest* Arena::CreateMaybeMessage< ::speechgrinder::sgapi::v1::SluRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechgrinder::sgapi::v1::SluRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::speechgrinder::sgapi::v1::SluConfig* Arena::CreateMaybeMessage< ::speechgrinder::sgapi::v1::SluConfig >(Arena* arena) {
  return Arena::CreateInternal< ::speechgrinder::sgapi::v1::SluConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::speechgrinder::sgapi::v1::SluEvent* Arena::CreateMaybeMessage< ::speechgrinder::sgapi::v1::SluEvent >(Arena* arena) {
  return Arena::CreateInternal< ::speechgrinder::sgapi::v1::SluEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::speechgrinder::sgapi::v1::SluResponse* Arena::CreateMaybeMessage< ::speechgrinder::sgapi::v1::SluResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechgrinder::sgapi::v1::SluResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::speechgrinder::sgapi::v1::SluStarted* Arena::CreateMaybeMessage< ::speechgrinder::sgapi::v1::SluStarted >(Arena* arena) {
  return Arena::CreateInternal< ::speechgrinder::sgapi::v1::SluStarted >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::speechgrinder::sgapi::v1::SluFinished* Arena::CreateMaybeMessage< ::speechgrinder::sgapi::v1::SluFinished >(Arena* arena) {
  return Arena::CreateInternal< ::speechgrinder::sgapi::v1::SluFinished >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::speechgrinder::sgapi::v1::SluError* Arena::CreateMaybeMessage< ::speechgrinder::sgapi::v1::SluError >(Arena* arena) {
  return Arena::CreateInternal< ::speechgrinder::sgapi::v1::SluError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::speechgrinder::sgapi::v1::Utterance* Arena::CreateMaybeMessage< ::speechgrinder::sgapi::v1::Utterance >(Arena* arena) {
  return Arena::CreateInternal< ::speechgrinder::sgapi::v1::Utterance >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::speechgrinder::sgapi::v1::Alternative* Arena::CreateMaybeMessage< ::speechgrinder::sgapi::v1::Alternative >(Arena* arena) {
  return Arena::CreateInternal< ::speechgrinder::sgapi::v1::Alternative >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::speechgrinder::sgapi::v1::Token* Arena::CreateMaybeMessage< ::speechgrinder::sgapi::v1::Token >(Arena* arena) {
  return Arena::CreateInternal< ::speechgrinder::sgapi::v1::Token >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::speechgrinder::sgapi::v1::LoginRequest* Arena::CreateMaybeMessage< ::speechgrinder::sgapi::v1::LoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::speechgrinder::sgapi::v1::LoginRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::speechgrinder::sgapi::v1::LoginResponse* Arena::CreateMaybeMessage< ::speechgrinder::sgapi::v1::LoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::speechgrinder::sgapi::v1::LoginResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "IncludeEnd.h"
