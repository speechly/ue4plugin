// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sg.proto

#include "IncludeBegin.h"

#include "sg.pb.h"
#include "sg.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace speechgrinder {
namespace sgapi {
namespace v1 {

static const char* Slu_method_names[] = {
  "/speechgrinder.sgapi.v1.Slu/Stream",
};

std::unique_ptr< Slu::Stub> Slu::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Slu::Stub> stub(new Slu::Stub(channel));
  return stub;
}

Slu::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Stream_(Slu_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>* Slu::Stub::StreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>::Create(channel_.get(), rpcmethod_Stream_, context);
}

::grpc::ClientAsyncReaderWriter< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>* Slu::Stub::AsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>::Create(channel_.get(), cq, rpcmethod_Stream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>* Slu::Stub::PrepareAsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>::Create(channel_.get(), cq, rpcmethod_Stream_, context, false, nullptr);
}

Slu::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Slu_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Slu::Service, ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>(
          std::mem_fn(&Slu::Service::Stream), this)));
}

Slu::Service::~Service() {
}

::grpc::Status Slu::Service::Stream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::speechgrinder::sgapi::v1::SluResponse, ::speechgrinder::sgapi::v1::SluRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Identity_method_names[] = {
  "/speechgrinder.sgapi.v1.Identity/Login",
};

std::unique_ptr< Identity::Stub> Identity::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Identity::Stub> stub(new Identity::Stub(channel));
  return stub;
}

Identity::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Login_(Identity_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Identity::Stub::Login(::grpc::ClientContext* context, const ::speechgrinder::sgapi::v1::LoginRequest& request, ::speechgrinder::sgapi::v1::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::speechgrinder::sgapi::v1::LoginResponse>* Identity::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::speechgrinder::sgapi::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::speechgrinder::sgapi::v1::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::speechgrinder::sgapi::v1::LoginResponse>* Identity::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::speechgrinder::sgapi::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::speechgrinder::sgapi::v1::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

Identity::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Identity_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Identity::Service, ::speechgrinder::sgapi::v1::LoginRequest, ::speechgrinder::sgapi::v1::LoginResponse>(
          std::mem_fn(&Identity::Service::Login), this)));
}

Identity::Service::~Service() {
}

::grpc::Status Identity::Service::Login(::grpc::ServerContext* context, const ::speechgrinder::sgapi::v1::LoginRequest* request, ::speechgrinder::sgapi::v1::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace speechgrinder
}  // namespace sgapi
}  // namespace v1

#include "IncludeEnd.h"
