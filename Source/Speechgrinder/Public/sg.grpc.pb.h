// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sg.proto
// Original file comments:
// MIT License
//
// Copyright (c) 2019 Speechgrinder
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
#ifndef GRPC_sg_2eproto__INCLUDED
#define GRPC_sg_2eproto__INCLUDED

#include "sg.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace speechgrinder {
namespace sgapi {
namespace v1 {

// Speechgrinder spoken language understanding service
//
// This service requires that the user has an accesstoken from
// `Identity` service. The token must be included in the metadata as
// `Authorization` key with value `Bearer TOKEN_HERE`.
class Slu final {
 public:
  static constexpr char const* service_full_name() {
    return "speechgrinder.sgapi.v1.Slu";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Starts an SLU bidirectional stream, the input and output
    // messages explains the details of the call.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>> Stream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>>(StreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>> AsyncStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>>(AsyncStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>> PrepareAsyncStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>>(PrepareAsyncStreamRaw(context, cq));
    }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>* StreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>* AsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>* PrepareAsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>> Stream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>>(StreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>> AsyncStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>>(AsyncStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>> PrepareAsyncStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>>(PrepareAsyncStreamRaw(context, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReaderWriter< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>* StreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>* AsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::speechgrinder::sgapi::v1::SluRequest, ::speechgrinder::sgapi::v1::SluResponse>* PrepareAsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Stream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Starts an SLU bidirectional stream, the input and output
    // messages explains the details of the call.
    virtual ::grpc::Status Stream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::speechgrinder::sgapi::v1::SluResponse, ::speechgrinder::sgapi::v1::SluRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Stream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::speechgrinder::sgapi::v1::SluResponse, ::speechgrinder::sgapi::v1::SluRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::speechgrinder::sgapi::v1::SluResponse, ::speechgrinder::sgapi::v1::SluRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Stream<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Stream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::speechgrinder::sgapi::v1::SluResponse, ::speechgrinder::sgapi::v1::SluRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Stream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::speechgrinder::sgapi::v1::SluResponse, ::speechgrinder::sgapi::v1::SluRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

// Authentication and identity service
class Identity final {
 public:
  static constexpr char const* service_full_name() {
    return "speechgrinder.sgapi.v1.Identity";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Performs a login for the user, when successful it returns an
    // access token to access `Slu` service.
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::speechgrinder::sgapi::v1::LoginRequest& request, ::speechgrinder::sgapi::v1::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechgrinder::sgapi::v1::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::speechgrinder::sgapi::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechgrinder::sgapi::v1::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechgrinder::sgapi::v1::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::speechgrinder::sgapi::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::speechgrinder::sgapi::v1::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechgrinder::sgapi::v1::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::speechgrinder::sgapi::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::speechgrinder::sgapi::v1::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::speechgrinder::sgapi::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Login(::grpc::ClientContext* context, const ::speechgrinder::sgapi::v1::LoginRequest& request, ::speechgrinder::sgapi::v1::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechgrinder::sgapi::v1::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::speechgrinder::sgapi::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechgrinder::sgapi::v1::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechgrinder::sgapi::v1::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::speechgrinder::sgapi::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::speechgrinder::sgapi::v1::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::speechgrinder::sgapi::v1::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::speechgrinder::sgapi::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::speechgrinder::sgapi::v1::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::speechgrinder::sgapi::v1::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Performs a login for the user, when successful it returns an
    // access token to access `Slu` service.
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::speechgrinder::sgapi::v1::LoginRequest* request, ::speechgrinder::sgapi::v1::LoginResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::speechgrinder::sgapi::v1::LoginRequest* request, ::speechgrinder::sgapi::v1::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::speechgrinder::sgapi::v1::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::speechgrinder::sgapi::v1::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Login<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::speechgrinder::sgapi::v1::LoginRequest* request, ::speechgrinder::sgapi::v1::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::speechgrinder::sgapi::v1::LoginRequest* request, ::speechgrinder::sgapi::v1::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::speechgrinder::sgapi::v1::LoginRequest, ::speechgrinder::sgapi::v1::LoginResponse>(std::bind(&WithStreamedUnaryMethod_Login<BaseClass>::StreamedLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::speechgrinder::sgapi::v1::LoginRequest* request, ::speechgrinder::sgapi::v1::LoginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::speechgrinder::sgapi::v1::LoginRequest,::speechgrinder::sgapi::v1::LoginResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Login<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Login<Service > StreamedService;
};

}  // namespace v1
}  // namespace sgapi
}  // namespace speechgrinder

#endif  // GRPC_sg_2eproto__INCLUDED
